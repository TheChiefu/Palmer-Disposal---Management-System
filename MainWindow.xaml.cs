using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using Data;
using Data.Types;

namespace Palmer_Disposal___Management_System.Commands
{
    public class Commands
    {
        public static RoutedUICommand Exit = new RoutedUICommand("Exit the program", "Exit", typeof(Commands));
        public static RoutedUICommand Refresh = new RoutedUICommand("Refreshs the customer list", "Refresh", typeof(Commands));
        public static RoutedUICommand Save = new RoutedUICommand("Saves the program", "Save", typeof(Commands));
        public static RoutedUICommand AddCustomer = new RoutedUICommand("Adds new customer", "Add Customer", typeof(Commands));
    }
}

namespace Palmer_Disposal___Management_System
{

    public partial class MainWindow : Window
    {
        //EXE file path location - For saving data
        public static string savePath = (Environment.CurrentDirectory + "\\data.epd");
        public static string savePrefsPath = (Environment.CurrentDirectory + "\\prefs.dat");

        //Theme Data
        public int themeIndex = 0;

        //Customer Data
        public List<Customer> customers = new List<Customer>();
        public int selected_customer_index = 0;
        public CustomerBlock lastCustomer = null;
        private int databaseSize = 0; //Size of customer list when program is loaded or saved (in case people are added or delete)

        //Global Temp Payment Data
        public List<Payment> payments = new List<Payment>();




        // Program Open Event ///
        public MainWindow()
        {

            //If file exists load from it otherwise create fresh file
            if (System.IO.File.Exists(savePath))
            {
                //From file make customer list
                Processing.LoadData(ref customers, savePath);
                databaseSize = customers.Count();
            }
            else
            {
                //Make new save data
                MessageBox.Show("No Customer Data, creating default file.");
                Processing.SaveData(customers, savePath, true);
            }

            //Load Save prefs if can't load use defaults
            if (System.IO.File.Exists(savePrefsPath))
            {
                Processing.LoadPrefs(savePrefsPath, out themeIndex);
            }


            InitializeComponent();


            //Once program loaded, load proper theme
            switch (themeIndex)
            {
                case 0:
                    BlackGradientTheme();
                    break;
                case 1:
                    WhiteTheme();
                    break;
                case 2:
                    BlackTheme();
                    break;
                case 3:
                    FunTheme();
                    break;
                default:
                    BlackGradientTheme();
                    break;
            }
        }




        // UI Events //

        private void ExitProgram_Checked(object sender, RoutedEventArgs e)
        {
            System.Windows.Application.Current.Shutdown();
        }

        private void Exit_Program(object sender, ExecutedRoutedEventArgs e)
        {
            System.Windows.Application.Current.Shutdown();
        }

        private void About_Program_Event(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("This program was created by Austin Lanphear for the Palmer Disposal Company to Manage their customer's data.", "About Program", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void Save_Program(object sender, RoutedEventArgs e)
        {
            Save(true);
        }

        private void Refresh_List_Click(object sender, RoutedEventArgs e)
        {
            RefreshScrollList(customers);
        }

        private void Selected_Payment_History_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Selected_Payment_History.Columns[0].Header = "Time / Date";
            Selected_Payment_History.Columns[1].Header = "Amount";
            Selected_Payment_History.Columns[2].Header = "Comment";
        }

        private void ScrollViewer_Initialized(object sender, EventArgs e)
        {
            RefreshScrollList(customers);
        }

        private void SearchBar_KeyDown(object sender, KeyEventArgs e)
        {
            //New listing containing customers relevant to current search value when enter is pressed
            if (e.Key == Key.Return)
            {
                RefreshScrollList(Processing.CustomerSearch(customers, SearchBar.Text));
            }
        }

        //Customer Payment History Datagrid
        private void PaymentGridAddRow_Click(object sender, RoutedEventArgs e)
        {
            if(Selected_Payment_History.ItemsSource != null)
            {
                List<Payment> payments = (List<Payment>)Selected_Payment_History.ItemsSource;

                payments.Add(new Payment());

                Selected_Payment_History.Items.Refresh();
            }
            else
            {
                MessageBox.Show("No customer selected, pick one!", "No Customer Selected", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void PaymentGridDeleteRow_Click(object sender, RoutedEventArgs e)
        {
            if(Selected_Payment_History.ItemsSource != null)
            {
                List<Payment> payments = (List<Payment>)Selected_Payment_History.ItemsSource;

                var selectedItem = Selected_Payment_History.SelectedItem as Payment;

                if(selectedItem != null)
                {
                    payments.Remove(selectedItem);
                }

                Selected_Payment_History.Items.Refresh();
            }
            else
            {
                MessageBox.Show("No customer selected, pick one!", "No Customer Selected", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }



        // Button Functions //


        //Remove customer from list
        private void Selected_Delete_User_Click(object sender, RoutedEventArgs e)
        {
            if (customers[selected_customer_index] != null)
            {
                //Ask user first before deleting
                if (MessageBox.Show("Are you sure you want to delete \"" + customers[selected_customer_index].name + "\"?", "Delete User", MessageBoxButton.YesNo, MessageBoxImage.Exclamation) == MessageBoxResult.Yes)
                {
                    customers.Remove(customers[selected_customer_index]);
                    RefreshScrollList(customers);
                    selected_customer_index = 0;
                    DisplayDataPanel(customers[selected_customer_index]);
                }
            }
        }

        //Adds customer to database
        private void Add_Customer_Click(object sender, RoutedEventArgs e)
        {
            //Add New Customer to Customer List
            MessageBox.Show("Added new customer");
            customers.Add(new Customer());

            //Assign new customer index at max
            customers[customers.Count() - 1].index = customers.Count() - 1;

            //Set current selected index back to 0
            selected_customer_index = 0;

            //Refresh List to show new customer
            RefreshScrollList(customers);
        }

        //Displays current customers based on search box and button click
        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            //New listing containing customers relevant to current search value
            RefreshScrollList(Processing.CustomerSearch(customers, SearchBar.Text));
        }

        //Sends current customer data to right panel viewer
        private void Customer_Click(object sender, RoutedEventArgs e)
        {
            CustomerBlock customer = sender as CustomerBlock;

            //To avoid index exceptions
            try
            {
                selected_customer_index = customer.index;

                //If no previous customer has been clicked on, make this one selected
                if (lastCustomer == null) lastCustomer = customer;

                //If different customer is clicked "declick" last customer
                if (customer != lastCustomer)
                {
                    lastCustomer.clicked = false;
                    lastCustomer.Background = Brushes.Transparent;
                    lastCustomer = customer;
                }

                DisplayDataPanel(customers[selected_customer_index]);

                //Set selected customer color
                customer.clicked = true;
                BrushConverter bc = new BrushConverter();
                customer.Background = (Brush)bc.ConvertFrom("#4ba7f0");


            }
            catch (Exception ex)
            {
                MessageBox.Show("Index at " + selected_customer_index + " does not exist.", ex.Message, MessageBoxButton.OK, MessageBoxImage.Error);
                selected_customer_index = 0;
            }
        }

        //Makes changes to customer in program and save to file
        private void Apply_Changes_Click(object sender, RoutedEventArgs e)
        {
            Save(true);
            databaseSize = customers.Count();
            RefreshScrollList(customers);
        }





        // General Purpose Functions //


        // Also saves current selected customer values if chosen
        private void Save(bool displayMessage)
        {
            //Takes what is currently in sidepanel and appends to customer's data
            customers[selected_customer_index].accountNumber = CI_AccountNumber.Text;
            customers[selected_customer_index].address = CI_Address.Text;
            customers[selected_customer_index].comment = CI_Comment.Text;
            customers[selected_customer_index].phoneNumber = CI_Phone.Text;
            customers[selected_customer_index].name = CI_Name.Text;
            customers[selected_customer_index].town = CI_Town.Text;

            //Once done appending new data save to file
            Processing.SaveData(customers, savePath, displayMessage);

            //Save user prefs
            Processing.SavePrefs(savePrefsPath, themeIndex);

            //Processing.Encrypt(savePath, "test");
        }

        private void RefreshScrollList(List<Customer> listCustomers)
        {
            //Restart List
            CustomerGrid.Children.Clear();
            CustomerGrid.RowDefinitions.Clear();

            int index = 0;

            //Find each customer in list
            foreach (Customer customer in listCustomers)
            {

                //Add new TrackControl to playlist grid
                CustomerBlock block = new CustomerBlock();
                block.GetCustomerData(customer);
                block.Click += new RoutedEventHandler(Customer_Click);

                //New row to grid per song
                RowDefinition newCustomerRow = new RowDefinition();
                newCustomerRow.Height = new GridLength(50);

                CustomerGrid.RowDefinitions.Add(newCustomerRow);
                Grid.SetRow(block, CustomerGrid.RowDefinitions.Count - 1);


                //White Themes
                if(themeIndex == 1)
                {
                    block.Number.Foreground = Brushes.Black;
                    block.Name.Foreground = Brushes.Black;
                    block.Address.Foreground = Brushes.Black;
                    block.Town.Foreground = Brushes.Black;
                    block.Phone.Foreground = Brushes.Black;
                    block.Comment.Foreground = Brushes.Black;
                }

                

                CustomerGrid.Children.Add(block);
                index++;
            }

            index = 0;
        }

        //Get customer data and display it on right side panel
        private void DisplayDataPanel(Customer customer)
        {
                //Directly access customer list's data by index (not reference! - copy by value to text box)
                CI_AccountNumber.Text = customers[selected_customer_index].accountNumber;
                CI_Address.Text = customers[selected_customer_index].address;
                CI_Comment.Text = customers[selected_customer_index].comment;
                CI_Phone.Text = customers[selected_customer_index].phoneNumber;
                CI_Name.Text = customers[selected_customer_index].name;
                CI_Town.Text = customers[selected_customer_index].town;

                Selected_Payment_History.ItemsSource = customers[selected_customer_index].payments;
        }






        // Program Exit //

        //If user makes changes to data and trying to exit program ask if they want to save
        private void Application_Exit(object sender, System.ComponentModel.CancelEventArgs e)
        {
            


            //Check if database size has been changed
            if(customers.Count != databaseSize)
            {
                if(MessageBox.Show("The size of the database has been change since you last saved. Would you like to save your changes?", "Database Size Changed", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    Save(true);
                }
            }

            //If no customer is selected don't warn user (since no data has been changed)
            if (lastCustomer != null)
            {
                bool sideDataSame = true;

                //Compare current data values to saved data
                if (CI_AccountNumber.Text != customers[selected_customer_index].accountNumber) sideDataSame = false;
                if (CI_Address.Text != customers[selected_customer_index].address) sideDataSame = false;
                if (CI_Comment.Text != customers[selected_customer_index].comment) sideDataSame = false;
                if (CI_Phone.Text != customers[selected_customer_index].phoneNumber) sideDataSame = false;
                if (CI_Name.Text != customers[selected_customer_index].name) sideDataSame = false;
                if (CI_Town.Text != customers[selected_customer_index].town) sideDataSame = false;

                if (customers[selected_customer_index].payments != Selected_Payment_History.ItemsSource) sideDataSame = false;

                //Check if side panel data is different from saved user data
                if (!sideDataSame)
                {
                    if (MessageBox.Show("You've made changes to '" + customers[selected_customer_index].name + "' would you like to save your changes?", "Changes not saved!", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
                    {
                        Save(true);
                    }
                }
            }
        }




        // Themes //

        private void WhiteTheme()
        {
            themeIndex = 1;

            //Items color changes
            MainGrid.Background = Brushes.White;
            RightPanel.Background = Brushes.White;
            WhiteThemeGeneric();

            //Refresh Unchanged Items
            RefreshScrollList(customers);
        }

        private void BlackTheme()
        {
            themeIndex = 2;

            //Items color changes
            MainGrid.Background = Brushes.Black;
            RightPanel.Background = Brushes.Black;
            BlackThemeGeneric();

            //Refresh Unchanged Items
            RefreshScrollList(customers);
        }

        private void FunTheme()
        {
            themeIndex = 3;

            //Image Background
            System.Windows.Media.Imaging.BitmapImage anime = new System.Windows.Media.Imaging.BitmapImage(new Uri("pack://application:,,,/harry.jpg"));
            MainGrid.Background = new ImageBrush(anime);

            //Items color changes
            RightPanel.Background = Brushes.Transparent;
            BlackThemeGeneric();

            //Refresh Unchanged Items
            RefreshScrollList(customers);

            //Funny Events

            Uri uri = new Uri(@"pack://application:,,,/harry.wav");
            System.Media.SoundPlayer player = new System.Media.SoundPlayer(Application.GetResourceStream(uri).Stream);
            player.Play();

        }

        private void BlackGradientTheme()
        {
            themeIndex = 0;

            LinearGradientBrush brush = new LinearGradientBrush();

            //Gradient Program Background
            brush.StartPoint = new Point(0.5, 0);
            brush.EndPoint = new Point(0.5, 1);
            brush.GradientStops.Add(new GradientStop(Colors.Black, 1.0));
            brush.GradientStops.Add(new GradientStop(Colors.White, 0.0));
            brush.GradientStops.Add(new GradientStop(Color.FromRgb(80, 80, 80), 0.148));

            //Items color changes
            MainGrid.Background = brush;
            RightPanel.Background = new SolidColorBrush(Color.FromRgb(35, 35, 35));
            BlackThemeGeneric();

            //Refresh Unchanged Items
            RefreshScrollList(customers);
        }


        //UI Buttons for Themes
        private void WhiteTheme_Click(object sender, RoutedEventArgs e)
        {
            WhiteTheme();
        }

        private void BlackTheme_Click(object sender, RoutedEventArgs e)
        {
            BlackTheme();   
        }

        private void FunTheme_Click(object sender, RoutedEventArgs e)
        {
            FunTheme();
        }

        private void BlackGradient_Click(object sender, RoutedEventArgs e)
        {
            BlackGradientTheme();
        }


        //Used for shared item changes (i.e white colored or black colored text)
        private void BlackThemeGeneric()
        {
            SearchLabel.Foreground = Brushes.White;

            CI_L.Foreground = Brushes.White;
            CI_AC_L.Foreground = Brushes.White;
            CI_N_L.Foreground = Brushes.White;
            CI_A_L.Foreground = Brushes.White;
            CI_P_L.Foreground = Brushes.White;
            CI_T_L.Foreground = Brushes.White;
            CI_C_L.Foreground = Brushes.White;

            HeaderBlock.Number.Foreground = Brushes.White;
            HeaderBlock.Name.Foreground = Brushes.White;
            HeaderBlock.Address.Foreground = Brushes.White;
            HeaderBlock.Town.Foreground = Brushes.White;
            HeaderBlock.Phone.Foreground = Brushes.White;
            HeaderBlock.Comment.Foreground = Brushes.White;
        }

        private void WhiteThemeGeneric()
        {
            SearchLabel.Foreground = Brushes.Black;

            CI_L.Foreground = Brushes.Black;
            CI_AC_L.Foreground = Brushes.Black;
            CI_N_L.Foreground = Brushes.Black;
            CI_A_L.Foreground = Brushes.Black;
            CI_P_L.Foreground = Brushes.Black;
            CI_T_L.Foreground = Brushes.Black;
            CI_C_L.Foreground = Brushes.Black;

            HeaderBlock.Number.Foreground = Brushes.Black;
            HeaderBlock.Name.Foreground = Brushes.Black;
            HeaderBlock.Address.Foreground = Brushes.Black;
            HeaderBlock.Town.Foreground = Brushes.Black;
            HeaderBlock.Phone.Foreground = Brushes.Black;
            HeaderBlock.Comment.Foreground = Brushes.Black;
        }
    }
}